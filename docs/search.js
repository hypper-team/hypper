window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "hypper", "modulename": "hypper", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.base", "modulename": "hypper.base", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.base.Base", "modulename": "hypper.base", "qualname": "Base", "type": "class", "doc": "<p>Base class implements fit function for all hypergraph-based methods.</p>\n"}, {"fullname": "hypper.base.Base.__init__", "modulename": "hypper.base", "qualname": "Base.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "hypper.base.Base.fit", "modulename": "hypper.base", "qualname": "Base.fit", "type": "function", "doc": "<p></p>\n", "signature": "(self, data: pandas.core.frame.DataFrame, label_column: str)", "funcdef": "def"}, {"fullname": "hypper.base.TransformerMixin", "modulename": "hypper.base", "qualname": "TransformerMixin", "type": "class", "doc": "<p>Mixin class for all transformers in Hypper.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  Raised when <code>transform</code> function was not implemented.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.ndarray: Transformed array.</p>\n</blockquote>\n", "bases": "abc.ABC"}, {"fullname": "hypper.base.TransformerMixin.transform", "modulename": "hypper.base", "qualname": "TransformerMixin.transform", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "hypper.base.TransformerMixin.fit_transform", "modulename": "hypper.base", "qualname": "TransformerMixin.fit_transform", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    data: pandas.core.frame.DataFrame,\n    label_column: str,\n    **fit_params\n)", "funcdef": "def"}, {"fullname": "hypper.base.PredictorMixin", "modulename": "hypper.base", "qualname": "PredictorMixin", "type": "class", "doc": "<p>Mixin class for all predictors in Hypper.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.ndarray: Predictions array.</p>\n</blockquote>\n", "bases": "abc.ABC"}, {"fullname": "hypper.base.PredictorMixin.predict", "modulename": "hypper.base", "qualname": "PredictorMixin.predict", "type": "function", "doc": "<p>Method returns class predictions.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  Raised when <code>predict</code> function was not implemented.</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "hypper.base.PredictorMixin.predict_proba", "modulename": "hypper.base", "qualname": "PredictorMixin.predict_proba", "type": "function", "doc": "<p>Method returns class probabilities predictions.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  Raised when <code>predict_proba</code> function was not implemented.</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "hypper.classification", "modulename": "hypper.classification", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.classification.CDWC", "modulename": "hypper.classification", "qualname": "CDWC", "type": "class", "doc": "<p>Hypergraph-based binary classifier.</p>\n\n<p>Classifier is based on the hypergraph class-dependent weighting method.</p>\n", "bases": "hypper.base.Base, hypper.base.PredictorMixin"}, {"fullname": "hypper.classification.CDWC.__init__", "modulename": "hypper.classification", "qualname": "CDWC.__init__", "type": "function", "doc": "<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>weighting_iterations (int):</strong>  Number of weighting iterations during hypergraph class-dependent weighting method.</li>\n<li><strong>weighting_normalization_strategy (str, optional):</strong>  Type of normalization during hypergraph class-dependent weighting method. Defaults to 'max'. Options: 'max', 'l1', 'l2'.</li>\n<li><strong>random_seed (int, optional):</strong>  Random seed. Defaults to 42.</li>\n<li><strong>verbosity (int, optional):</strong>  Value greater than 0 displays info about the trainign process. Defaults to None.</li>\n</ul>\n", "signature": "(\n    self,\n    weighting_iterations: int,\n    weighting_normalization_strategy='max',\n    random_seed=42,\n    verbosity=None\n)", "funcdef": "def"}, {"fullname": "hypper.classification.CDWC.fit", "modulename": "hypper.classification", "qualname": "CDWC.fit", "type": "function", "doc": "<p>Fit data into classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  Input data.</li>\n<li><strong>label_column (str):</strong>  Label column name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self</p>\n</blockquote>\n", "signature": "(self, data: pandas.core.frame.DataFrame, label_column: str)", "funcdef": "def"}, {"fullname": "hypper.classification.CDWC.classifier", "modulename": "hypper.classification", "qualname": "CDWC.classifier", "type": "function", "doc": "<p>Classification method based on the class-dependent hypergraph weighting.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (pd.DataFrame):</strong>  Input data.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  Input data unknown type error.</li>\n<li><strong>ValueError:</strong>  Extracting feature names error.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.ndarray: Array with predictions.</p>\n</blockquote>\n", "signature": "(self, X: pandas.core.frame.DataFrame) -> numpy.ndarray", "funcdef": "def"}, {"fullname": "hypper.classification.CDWC.predict", "modulename": "hypper.classification", "qualname": "CDWC.predict", "type": "function", "doc": "<p>Method returns class predictions.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (np.ndarray):</strong>  Input data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.ndarray: Array with predicted classes.</p>\n</blockquote>\n", "signature": "(self, X: numpy.ndarray) -> numpy.ndarray", "funcdef": "def"}, {"fullname": "hypper.classification.CDWC.predict_proba", "modulename": "hypper.classification", "qualname": "CDWC.predict_proba", "type": "function", "doc": "<p>Method returns class probabilities predictions.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (np.ndarray):</strong>  Input data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.ndarray: Array with predicted probabilities for classes.</p>\n</blockquote>\n", "signature": "(self, X: numpy.ndarray) -> numpy.ndarray", "funcdef": "def"}, {"fullname": "hypper.data_reader", "modulename": "hypper.data_reader", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.data_reader.read_sample_data", "modulename": "hypper.data_reader", "qualname": "read_sample_data", "type": "function", "doc": "<p>Loads custom sample dataset.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_german_data", "modulename": "hypper.data_reader", "qualname": "read_german_data", "type": "function", "doc": "<p>Loads <code>German Credit Data</code>.</p>\n\n<p><strong>Dataset</strong>: https://archive.ics.uci.edu/ml/datasets/statlog+(german+credit+data)\n<strong>Download link</strong>: https://www.kaggle.com/kabure/german-credit-data-with-risk/download</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_abdominal_pain_data", "modulename": "hypper.data_reader", "qualname": "read_abdominal_pain_data", "type": "function", "doc": "<p>Loads <code>Acute Inflammations Data Set</code>.</p>\n\n<p><strong>Dataset</strong>: https://archive.ics.uci.edu/ml/datasets/Acute+Inflammations</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_breast_cancer_data", "modulename": "hypper.data_reader", "qualname": "read_breast_cancer_data", "type": "function", "doc": "<p>Loads <code>Breast Cancer Data Set</code>.</p>\n\n<p><strong>Dataset</strong>: https://archive.ics.uci.edu/ml/datasets/breast+cancer</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_car_evaluation_data", "modulename": "hypper.data_reader", "qualname": "read_car_evaluation_data", "type": "function", "doc": "<p>Loads <code>Car Evaluation Data Set</code>.</p>\n\n<p><strong>Dataset</strong>: https://archive.ics.uci.edu/ml/datasets/car+evaluation</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_spect_heart", "modulename": "hypper.data_reader", "qualname": "read_spect_heart", "type": "function", "doc": "<p>Loads <code>SPECT Heart Data Set</code>.</p>\n\n<p><strong>Dataset</strong>: https://archive.ics.uci.edu/ml/datasets/spect+heart</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_congressional_voting_records", "modulename": "hypper.data_reader", "qualname": "read_congressional_voting_records", "type": "function", "doc": "<p>Loads <code>Congressional Voting Records Data Set</code>.</p>\n\n<p><strong>Dataset</strong>: https://archive.ics.uci.edu/ml/datasets/congressional+voting+records</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_criteo", "modulename": "hypper.data_reader", "qualname": "read_criteo", "type": "function", "doc": "<p>Loads <code>Criteo Sponsored Search Conversion Log Dataset</code>.</p>\n\n<p><strong>Dataset</strong>: https://ailab.criteo.com/criteo-sponsored-search-conversion-log-dataset/</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "(\n    nrows=1000000,\n    size=0.1\n) -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_banking", "modulename": "hypper.data_reader", "qualname": "read_banking", "type": "function", "doc": "<p>Loads <code>Banking Dataset - Marketing Targets</code>.</p>\n\n<p><strong>Dataset</strong>: https://www.kaggle.com/prakharrathi25/banking-dataset-marketing-targets</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_phishing", "modulename": "hypper.data_reader", "qualname": "read_phishing", "type": "function", "doc": "<p>Loads <code>Phishing Dataset</code>.</p>\n\n<p><strong>Dataset</strong>: https://www.kaggle.com/shashwatwork/phishing-dataset-for-machine-learning</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_churn", "modulename": "hypper.data_reader", "qualname": "read_churn", "type": "function", "doc": "<p>Loads <code>Churn Modelling</code>.</p>\n\n<p><strong>Dataset</strong>: https://www.kaggle.com/shrutimechlearn/churn-modelling</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.data_reader.read_hr", "modulename": "hypper.data_reader", "qualname": "read_hr", "type": "function", "doc": "<p>Loads <code>HR Analytics: Job Change of Data Scientists</code>.</p>\n\n<p><strong>Dataset</strong>: https://www.kaggle.com/arashnic/hr-analytics-job-change-of-data-scientists</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[pd.DataFrame, str, list]: Tuple with DataFrame object, label column name and list of categorical columns.</p>\n</blockquote>\n", "signature": "() -> Tuple[pandas.core.frame.DataFrame, str, list]", "funcdef": "def"}, {"fullname": "hypper.feature_selection", "modulename": "hypper.feature_selection", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.feature_selection.BaseFS", "modulename": "hypper.feature_selection", "qualname": "BaseFS", "type": "class", "doc": "<p></p>\n"}, {"fullname": "hypper.feature_selection.BaseFS.__init__", "modulename": "hypper.feature_selection", "qualname": "BaseFS.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "hypper.feature_selection.CDWFS", "modulename": "hypper.feature_selection", "qualname": "CDWFS", "type": "class", "doc": "<p>Hypergraph-based feature selection method.</p>\n\n<p>Method generates feature importances for feature-value pairs (or aggregates results per feature) based on class-dependent weighting algorithm.</p>\n", "bases": "BaseFS, hypper.base.Base, hypper.base.TransformerMixin"}, {"fullname": "hypper.feature_selection.CDWFS.__init__", "modulename": "hypper.feature_selection", "qualname": "CDWFS.__init__", "type": "function", "doc": "<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>weighting_iterations (int):</strong>  Number of weighting iterations during hypergraph class-dependent weighting method.</li>\n<li><strong>weighting_normalization_strategy (str, optional):</strong>  Type of normalization during hypergraph class-dependent weighting method. Defaults to 'max'. Options: 'max', 'l1', 'l2'.</li>\n<li><strong>feature_values (bool, optional):</strong>  If method should return feature-value pairs or features (aggregated) importances. Defaults to True for feature-value pairs.</li>\n<li><strong>random_seed (int, optional):</strong>  Random seed. Defaults to 42.</li>\n<li><strong>verbosity (int, optional):</strong>  Value greater than 0 displays info about process progress. Defaults to None.</li>\n</ul>\n", "signature": "(\n    self,\n    weighting_iterations: int,\n    weighting_normalization_strategy='max',\n    feature_values=True,\n    random_seed=42,\n    verbosity=None\n)", "funcdef": "def"}, {"fullname": "hypper.feature_selection.CDWFS.fit", "modulename": "hypper.feature_selection", "qualname": "CDWFS.fit", "type": "function", "doc": "<p>Fit data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  Input data.</li>\n<li><strong>label_column (str):</strong>  Label column name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self</p>\n</blockquote>\n", "signature": "(self, data: pandas.core.frame.DataFrame, label_column: str)", "funcdef": "def"}, {"fullname": "hypper.feature_selection.CDWFS.fit_transform", "modulename": "hypper.feature_selection", "qualname": "CDWFS.fit_transform", "type": "function", "doc": "<p>Fit and transform data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  Input data.</li>\n<li><strong>label_column (str):</strong>  Label column name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame with feature names and feature importances columns.</p>\n</blockquote>\n", "signature": "(\n    self,\n    data: pandas.core.frame.DataFrame,\n    label_column: str,\n    **fit_params\n)", "funcdef": "def"}, {"fullname": "hypper.feature_selection.CDWFS.transform", "modulename": "hypper.feature_selection", "qualname": "CDWFS.transform", "type": "function", "doc": "<p>Transform fitted data and return feature importances.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame with feature names and feature importances columns.</p>\n</blockquote>\n", "signature": "(self) -> pandas.core.frame.DataFrame", "funcdef": "def"}, {"fullname": "hypper.feature_selection.RandomWalkFS", "modulename": "hypper.feature_selection", "qualname": "RandomWalkFS", "type": "class", "doc": "<p>Hypergraph-based feature selection method.</p>\n\n<p>Method generates feature importances for feature-value pairs (or aggregates results per feature) based on random walk algorithm.</p>\n", "bases": "BaseFS, hypper.base.Base, hypper.base.TransformerMixin"}, {"fullname": "hypper.feature_selection.RandomWalkFS.__init__", "modulename": "hypper.feature_selection", "qualname": "RandomWalkFS.__init__", "type": "function", "doc": "<p>_summary_</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>iterations (int):</strong>  Number of random walks iterations.</li>\n<li><strong>walk_length (int):</strong>  Random walks maximum length.</li>\n<li><strong>scoring_variant (str, optional):</strong>  Formula used to calculate score. Defaults to 'v1_3'. Options: 'v1_1', 'v1_2', 'v1_3' and 'v1_4'.. Defaults to 'v1_3'.</li>\n<li><strong>feature_values (bool, optional):</strong>  _description_. Defaults to True.</li>\n<li><strong>random_seed (int, optional):</strong>  _description_. Defaults to 42.</li>\n<li><strong>verbosity (bool, optional):</strong>  _description_. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SyntaxError:</strong>  Raised when unknown scoring variant is passed to a function.</li>\n</ul>\n", "signature": "(\n    self,\n    iterations: int,\n    walk_length: int,\n    scoring_variant='v1_3',\n    feature_values=True,\n    random_seed=42,\n    verbosity=False\n)", "funcdef": "def"}, {"fullname": "hypper.feature_selection.RandomWalkFS.fit", "modulename": "hypper.feature_selection", "qualname": "RandomWalkFS.fit", "type": "function", "doc": "<p>Fit data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  Input data.</li>\n<li><strong>label_column (str):</strong>  Label column name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>self</p>\n</blockquote>\n", "signature": "(self, data: pandas.core.frame.DataFrame, label_column: str)", "funcdef": "def"}, {"fullname": "hypper.feature_selection.RandomWalkFS.fit_transform", "modulename": "hypper.feature_selection", "qualname": "RandomWalkFS.fit_transform", "type": "function", "doc": "<p>Fit and transform data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  Input data.</li>\n<li><strong>label_column (str):</strong>  Label column name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame with feature names and feature importances columns.</p>\n</blockquote>\n", "signature": "(\n    self,\n    data: pandas.core.frame.DataFrame,\n    label_column: str,\n    **fit_params\n)", "funcdef": "def"}, {"fullname": "hypper.feature_selection.RandomWalkFS.transform", "modulename": "hypper.feature_selection", "qualname": "RandomWalkFS.transform", "type": "function", "doc": "<p>Transform fitted data and return feature importances.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pd.DataFrame: DataFrame with feature names and feature importances columns.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "hypper.hypergraph", "modulename": "hypper.hypergraph", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.hypergraph.HyperGraph", "modulename": "hypper.hypergraph", "qualname": "HyperGraph", "type": "class", "doc": "<p>Hypergraph representation of an input dataset.</p>\n\n<p>HyperGraph stores representation in sparse incidence matrix based on <code>pandas.DataFrame</code> input data structure. HyperGraph class implements also class-dependent weighting method.</p>\n"}, {"fullname": "hypper.hypergraph.HyperGraph.__init__", "modulename": "hypper.hypergraph", "qualname": "HyperGraph.__init__", "type": "function", "doc": "<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_data (pandas.DataFrame):</strong>  Input data.</li>\n<li><strong>label (str, optional):</strong>  Label column name.</li>\n<li><strong>random_seed (int, optional):</strong>  Random seed.</li>\n<li><strong>verbosity (int, optional):</strong>  Value greater than 0 displays info about process progress. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  Not recognized format of an input data.</li>\n</ul>\n", "signature": "(\n    self,\n    input_data: pandas.core.frame.DataFrame,\n    label: str,\n    random_seed=42,\n    verbosity=None\n)", "funcdef": "def"}, {"fullname": "hypper.hypergraph.HyperGraph.calculate_weights", "modulename": "hypper.hypergraph", "qualname": "HyperGraph.calculate_weights", "type": "function", "doc": "<p>Calculates matrices with columns corresponding to classes, and rows corresponding to hyperedges/vertices. The results are class-dependent hypergraph weights for hyperedges and vertices.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>iterations (int):</strong>  Number of hypergraph weighting iterations.</li>\n<li><strong>normalization_strategy (str, optional):</strong>  Normalization strategy. Defaults to 'max'. Options: 'max', 'l1', 'l2'.</li>\n<li><strong>iter_history (boolean, optional):</strong>  If True rememebers hyperedges and vertices weights from every iteration.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: If <code>iter_history</code> is set to <code>True</code> returns list of tuples, where evry tuple consists of hyperedges and vertices weight matrices for subsequent iterations.</p>\n</blockquote>\n", "signature": "(self, iterations, normalization_strategy='max', iter_history=False)", "funcdef": "def"}, {"fullname": "hypper.hypergraph.HyperGraph.normalize", "modulename": "hypper.hypergraph", "qualname": "HyperGraph.normalize", "type": "function", "doc": "<p>Method implements three normalization strategies: <code>Max</code>, <code>L1</code>, and <code>L2</code>.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>matrix (csc_matrix):</strong>  Input sparse matrix.</li>\n<li><strong>normalization_strategy (str):</strong>  Type of the normalization strategy.</li>\n<li><strong>axis (int):</strong>  Axis.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SyntaxError:</strong>  Not recognized normalization strategy.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>scipy.sparse.csc_matrix: Normalized sparse matrix.</p>\n</blockquote>\n", "signature": "(\n    self,\n    matrix: scipy.sparse._csc.csc_matrix,\n    normalization_strategy: str,\n    axis: int\n)", "funcdef": "def"}, {"fullname": "hypper.plot", "modulename": "hypper.plot", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.plot.HNX_Hypergraph", "modulename": "hypper.plot", "qualname": "HNX_Hypergraph", "type": "class", "doc": "<p>Hypper wrapper for HyperNetX hypergraph representation.</p>\n\n<p>Hypper hypergraph representation can be visualized thanks to HyperNetX library (<strong>https://github.com/pnnl/HyperNetX</strong>).</p>\n", "bases": "hypernetx.classes.hypergraph.Hypergraph"}, {"fullname": "hypper.plot.HNX_Hypergraph.__init__", "modulename": "hypper.plot", "qualname": "HNX_Hypergraph.__init__", "type": "function", "doc": "<p>Creates hypergraph representation with HyperNetX library.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hg (hypper.hypergraph.HyperGraph):</strong>  Hypper HyperGraph object.</li>\n<li><strong>include_label:</strong>  <code>True</code> if label should be visible as one of the hyperedges. Defaults to <code>False</code>.</li>\n</ul>\n", "signature": "(self, hg: hypper.hypergraph.HyperGraph, include_label=False)", "funcdef": "def"}, {"fullname": "hypper.plot.HNX_Hypergraph.draw", "modulename": "hypper.plot", "qualname": "HNX_Hypergraph.draw", "type": "function", "doc": "<p>Method uses hypernetx.draw to plot hypergraph.</p>\n", "signature": "(self, **kwargs)", "funcdef": "def"}, {"fullname": "hypper.plot.HNX_Hypergraph.draw_collapse_nodes", "modulename": "hypper.plot", "qualname": "HNX_Hypergraph.draw_collapse_nodes", "type": "function", "doc": "<p>Method uses hypernetx.draw with <code>collapsed_nodes</code> parameter to plot hypergraph.</p>\n", "signature": "(self, **kwargs)", "funcdef": "def"}, {"fullname": "hypper.undersampling", "modulename": "hypper.undersampling", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.undersampling.CDWU", "modulename": "hypper.undersampling", "qualname": "CDWU", "type": "class", "doc": "<p>Hypergraph-based undersampling method.</p>\n\n<p>Method resamples dataset based on class-dependent weighting algorithm.</p>\n", "bases": "hypper.base.Base, hypper.base.TransformerMixin"}, {"fullname": "hypper.undersampling.CDWU.__init__", "modulename": "hypper.undersampling", "qualname": "CDWU.__init__", "type": "function", "doc": "<p>_summary_</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>weighting_iterations (int):</strong>  Number of weighting iterations during hypergraph class-dependent weighting method.</li>\n<li><strong>weighting_normalization_strategy (str, optional):</strong>  Type of normalization during hypergraph class-dependent weighting method. Defaults to 'max'. Options: 'max', 'l1', 'l2'.</li>\n<li><strong>weighting_history (bool, optional):</strong>  If True use hyperedges and vertices weights from every weighting iteration to calculate final scores. Defaults to True.</li>\n<li><strong>version (int, optional):</strong>  Sample score calculation version. Defaults to 1. Options:\n<ul>\n<li>1 - <code>majority_class_sample_weight - minority_class_sample_weight</code> - promotes samples close to majority class (with repsect to minority class);</li>\n<li>2 - <code>majority_class_sample_weight + minority_class_sample_weight</code> - promotes samples close to both classes;</li>\n<li>3 - <code>minority_class_sample_weight</code> - promotes samples close to minority class;</li>\n<li>4 - <code>minority_class_sample_weight - majority_class_sample_weight</code> - promotes samples close to minority class (with respect to majority class);</li>\n<li>5 - <code>abs(majority_class_sample_weight - minority_class_sample_weight)</code> - promotes samples close to any class;</li>\n<li>6 - <code>majority_class_sample_weight</code> - promotes samples close to majority class.</li>\n</ul></li>\n<li><strong>majority_left_threshold (float, optional):</strong>  Parameter controlling precentage of additional samples from previously rejected. E.g. for binary class distribution 20-80 and <code>majority_left_threshold = 0.5</code>, majority class will be reduced to 50 samples <code>(20 + (80-20)*0.5)</code>.  Defaults to 0.0.</li>\n<li><strong>randomize_A (float, optional):</strong>  Randomization strength of the final output. 0.0 means lack of randomization. Defaults to 0.0.</li>\n<li><strong>random_seed (int, optional):</strong>  Random seed. Defaults to 42.</li>\n<li><strong>verbosity (bool, optional):</strong>  Value greater than 0 displays info about process progress. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  <code>majority_left_threshold</code> is out of expected range &lt;0.0, 1.0).</li>\n<li><strong>SyntaxError:</strong>  Unrecognized undersampling <code>version</code> selected.</li>\n</ul>\n", "signature": "(\n    self,\n    weighting_iterations: int,\n    weighting_normalization_strategy='max',\n    weighting_history=True,\n    version=1,\n    majority_left_threshold=0.0,\n    randomize_A=0.0,\n    random_seed=42,\n    verbosity=None\n)", "funcdef": "def"}, {"fullname": "hypper.undersampling.CDWU.fit", "modulename": "hypper.undersampling", "qualname": "CDWU.fit", "type": "function", "doc": "<p>Fit data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  Input data.</li>\n<li><strong>label_column (str):</strong>  Label column name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pd.DataFrame: Resampled DataFrame with reduced majority class.</p>\n</blockquote>\n", "signature": "(self, data: pandas.core.frame.DataFrame, label_column: str)", "funcdef": "def"}, {"fullname": "hypper.undersampling.CDWU.fit_transform", "modulename": "hypper.undersampling", "qualname": "CDWU.fit_transform", "type": "function", "doc": "<p>Fit and transform data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (pd.DataFrame):</strong>  Input data.</li>\n<li><strong>label_column (str):</strong>  Label column name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pd.DataFrame: Resampled DataFrame with reduced majority class.</p>\n</blockquote>\n", "signature": "(\n    self,\n    data: pandas.core.frame.DataFrame,\n    label_column: str,\n    **fit_params\n)", "funcdef": "def"}, {"fullname": "hypper.undersampling.CDWU.transform", "modulename": "hypper.undersampling", "qualname": "CDWU.transform", "type": "function", "doc": "<p>Transform fitted data and return resampled dataset.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pd.DataFrame: Resampled DataFrame with reduced majority class.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "hypper.utils", "modulename": "hypper.utils", "type": "module", "doc": "<p></p>\n"}, {"fullname": "hypper.utils.grouped", "modulename": "hypper.utils", "qualname": "grouped", "type": "function", "doc": "<p>Groups subsequent values according to the formula: <code>(s0,s1,s2,...sn-1), (sn,sn+1,sn+2,...s2n-1), (s2n,s2n+1,s2n+2,...s3n-1), ...</code></p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>iterable (list):</strong>  List of objects.</li>\n<li><strong>n (int):</strong>  Number of elements in group.</li>\n</ul>\n", "signature": "(iterable: list, n: int)", "funcdef": "def"}, {"fullname": "hypper.utils.flatten", "modulename": "hypper.utils", "qualname": "flatten", "type": "function", "doc": "<p>Returns flattened list.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>x (list):</strong>  Nested Python list.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: Flattened Python list.</p>\n</blockquote>\n", "signature": "(x: list) -> list", "funcdef": "def"}, {"fullname": "hypper.utils.save_object", "modulename": "hypper.utils", "qualname": "save_object", "type": "function", "doc": "<p>Saves object in Pickle format.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>obj :</strong>  Python object to save.</li>\n<li><strong>filename (str):</strong>  Save path.</li>\n</ul>\n", "signature": "(obj, filename: str)", "funcdef": "def"}, {"fullname": "hypper.utils.read_object", "modulename": "hypper.utils", "qualname": "read_object", "type": "function", "doc": "<p>Reads object from pickle format.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  Reading path.</li>\n</ul>\n", "signature": "(filename: str)", "funcdef": "def"}, {"fullname": "hypper.utils.timing", "modulename": "hypper.utils", "qualname": "timing", "type": "function", "doc": "<p>Decorator that measure s execution time of a selected function.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>f :</strong>  Function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: Return the time in seconds as a floating point number.</p>\n</blockquote>\n", "signature": "(f)", "funcdef": "def"}, {"fullname": "hypper.utils.showe_memory_usage", "modulename": "hypper.utils", "qualname": "showe_memory_usage", "type": "function", "doc": "<p>Function shows actual RAM usage.</p>\n", "signature": "()", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();